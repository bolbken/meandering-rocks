service: meandering-rocks-api-photos-service
frameworkVersion: '2'

package:
  excludeDevDependencies: true
  individually: true

plugins:
  - serverless-bundle
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-add-api-key
  - serverless-domain-manager
  - serverless-express

custom:
  dotenv:
    # Root of monorepo has .env* files
    basePath: '../../../'
    include:
      - API_KEY_NAME_TARGET_BROWSER
      - API_KEY_NAME_TARGET_AUX
      - API_PHOTOS_SERVICE_OFFLINE_HTTP_PORT
      - API_PHOTOS_SERVICE_OFFLINE_WEBSOCKET_PORT
      - API_PHOTOS_SERVICE_OFFLINE_LAMBDA_PORT
      - API_PHOTOS_SERVICE_GOOGLE_OAUTH_CLIENT_ID
      - API_PHOTOS_SERVICE_GOOGLE_OAUTH_CLIENT_SECRET
      - API_PHOTOS_SERVICE_GOOGLE_OAUTH_EMAIL
      - API_PHOTOS_SERVICE_GOOGLE_OAUTH_PASSWORD

  bundle:
    stats: false
    linting: false
    packager: yarn
    externals:
      - sharp
    forceExclude:
      - sharp
    fixPackages:
      - 'formidable@1.x'
  serverless-offline:
    httpPort: ${env:API_PHOTOS_SERVICE_OFFLINE_HTTP_PORT, 7010}
    websocketPort: ${env:API_PHOTOS_SERVICE_OFFLINE_WEBSOCKET_PORT, 7011}
    lambdaPort: ${env:API_PHOTOS_SERVICE_OFFLINE_LAMBDA_PORT, 7012}
  enablePrivate:
    production: true
    review: true
    other: false
  allowedOrigin:
    production: 'https://meandering.rocks'
    review: 'https://dev.meandering.rocks'
    other: '*'
  limits:
    production:
      limit: 1000
      burstLimit: 40
      rateLimit: 20
    review:
      limit: 100
      burstLimit: 20
      rateLimit: 10
  apiKeys:
    production:
      - name: ${env:API_KEY_NAME_TARGET_BROWSER}-production
        usagePlan:
          name: ${env:API_KEY_NAME_TARGET_BROWSER}-usage-plan-production
          quota:
            limit: ${self:custom.limits.production.limit}
            period: MONTH
          throttle:
            burstLimit: ${self:custom.limits.production.burstLimit}
            rateLimit: ${self:custom.limits.production.rateLimit}
      - name: ${env:API_KEY_NAME_TARGET_AUX}-production
        usagePlan:
          name: ${env:API_KEY_NAME_TARGET_BROWSER}-usage-plan-production
          quota:
            limit: ${self:custom.limits.production.limit}
            period: MONTH
          throttle:
            burstLimit: ${self:custom.limits.production.burstLimit}
            rateLimit: ${self:custom.limits.production.rateLimit}
    review:
      - name: ${env:API_KEY_NAME_TARGET_BROWSER}-review
        usagePlan:
          name: ${env:API_KEY_NAME_TARGET_BROWSER}-usage-plan-review
          quota:
            limit: ${self:custom.limits.review.limit}
            period: MONTH
          throttle:
            burstLimit: ${self:custom.limits.review.burstLimit}
            rateLimit: ${self:custom.limits.review.rateLimit}
      - name: ${env:API_KEY_NAME_TARGET_AUX}-review
        usagePlan:
          name: ${env:API_KEY_NAME_TARGET_BROWSER}-usage-plan-review
          quota:
            limit: ${self:custom.limits.review.limit}
            period: MONTH
          throttle:
            burstLimit: ${self:custom.limits.review.burstLimit}
            rateLimit: ${self:custom.limits.review.rateLimit}
  customDomain:
    basePath: ''
    domainName: ${file(../../../utils/tf-output.js):read.${self:provider.stage}.api_domain, place.holder}
    stage: ${self:provider.stage}

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'development'}
  region: ${opt:region, 'us-east-1'}
  timeout: 30
  role: ${file(../../../utils/tf-output.js):read.common.photos_service_lambda_role_arn}
  apiGateway:
    restApiId:
      '${file(../../../utils/tf-output.js):read.${self:provider.stage}.api_gateway_id, 12345}'
    restApiRootResourceId:
      '${file(../../../utils/tf-output.js):read.${self:provider.stage}.api_gateway_resource_id, 12345}'
    metrics: false

functions:
  photos:
    handler: handler.api
    layers:
      - '${file(../../../utils/tf-output.js):read.common.lambda_layer_sharp}'
    events:
      - http:
          path: /album
          method: GET
          private: true
          cors:
            origin: ${self:custom.allowedOrigin.${self:provider.stage}, '*'}
            headers:
              - Content-Type
              - X-Api-Key
      - http:
          path: /album/{param}
          method: GET
          private: true
          cors:
            origin: ${self:custom.allowedOrigin.${self:provider.stage}, '*'}
            headers:
              - Content-Type
              - X-Api-Key
      - http:
          path: /callback
          method: GET
