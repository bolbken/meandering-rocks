service: meandering-rocks-api-photos-service
frameworkVersion: '2'

package:
  excludeDevDependencies: true
  individually: true

plugins:
  - serverless-bundle
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-express

custom:
  dotenv:
    # Root of monorepo has .env* files
    basePath: '../../../'
    include:
      - API_KEY_NAME_TARGET_BROWSER
      - API_KEY_NAME_TARGET_AUX
      - API_PHOTOS_SERVICE_OFFLINE_HTTP_PORT=7010
      - API_PHOTOS_SERVICE_OFFLINE_WEBSOCKET_PORT=7011
      - API_PHOTOS_SERVICE_OFFLINE_LAMBDA_PORT=7012
      - API_PHOTOS_SERVICE_GOOGLE_OAUTH_CLIENT_ID
      - API_PHOTOS_SERVICE_GOOGLE_OAUTH_CLIENT_SECRET
      - API_PHOTOS_SERVICE_GOOGLE_OAUTH_EMAIL
      - API_PHOTOS_SERVICE_GOOGLE_OAUTH_PASSWORD

  bundle:
    stats: false
    linting: false
    packager: yarn
    externals:
      - sharp
    forceExclude:
      - sharp
    fixPackages:
      - 'formidable@1.x'
  serverless-offline:
    httpPort: ${env:API_PHOTOS_SERVICE_OFFLINE_HTTP_PORT, 7010}
    websocketPort: ${env:API_PHOTOS_SERVICE_OFFLINE_WEBSOCKET_PORT, 7011}
    lambdaPort: ${env:API_PHOTOS_SERVICE_OFFLINE_LAMBDA_PORT, 7012}
  enablePrivate:
    prod: true
    review: true
    other: false
  allowedOrigin:
    prod: 'https://meandering.rocks'
    review: 'https://dev.meandering.rocks'
    other: '*'
  limits:
    prod:
      limit: 1000
      burstLimit: 40
      rateLimit: 20
    review:
      limit: 100
      burstLimit: 20
      rateLimit: 10
    other:
      limit: 50
      burstLimit: 5
      rateLimit: 3

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  timeout: 10
  role: ${file(../../../tf/common/output.json):photos_service_lambda_role_arn}
  apiGateway:
    restApiId:
      '${file(../../../tf/common/output.json):api_gateway_id, 12345}'
    restApiRootResourceId:
      '${file(../../../tf/common/output.json):api_gateway_resource_id, 67890}'
    metrics: false
  apiKeys:
    - ${env:API_KEY_NAME_TARGET_BROWSER}-${opt:stage}
    - ${env:API_KEY_NAME_TARGET_AUX}-${opt:stage}
  usagePlan:
    quota:
      limit: ${self:custom.limits.${opt:stage}.limit, self:custom.limits.other.limit}
      offset: 2
      period: MONTH
    throttle:
      burstLimit: ${self:custom.limits.${opt:stage}.burstLimit, self:custom.limits.other.burstLimit}
      rateLimit: ${self:custom.limits.${opt:stage}.rateLimit, self:custom.limits.other.rateLimit}

functions:
  photos:
    handler: handler.api
    layers:
      - arn:aws:lambda:us-east-1:310674449483:layer:PhotosApi:6
    events:
      - http:
          path: /album
          method: GET
          private: ${self:custom.enablePrivate.${opt:stage}, false}
          cors:
            origin: ${self:custom.allowedOrigin.${opt:stage}, '*'}
            headers:
              - Content-Type
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
      - http:
          path: /album/{param}
          method: GET
          private: ${self:custom.enablePrivate.${opt:stage}, false}
          cors:
            origin: ${self:custom.allowedOrigin.${opt:stage}, '*'}
            headers:
              - Content-Type
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
      - http:
          path: /callback
          method: GET
