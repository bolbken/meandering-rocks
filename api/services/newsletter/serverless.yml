service: meandering-rocks-api-newsletter-service
frameworkVersion: '2'

package:
  excludeDevDependencies: true
  individually: true

plugins:
  - serverless-dotenv-plugin
  - serverless-bundle
  - serverless-dynamodb-local
  - serverless-add-api-key
  - serverless-domain-manager
  - serverless-offline

custom:
  dotenv:
    # Root of monorepo has .env* files
    basePath: '../../../'
    include:
      - API_KEY_NAME_TARGET_BROWSER
      - API_KEY_NAME_TARGET_AUX
      - API_NEWSLETTER_SERVICE_OFFLINE_HTTP_PORT
      - API_NEWSLETTER_SERVICE_OFFLINE_WEBSOCKET_PORT
      - API_NEWSLETTER_SERVICE_OFFLINE_LAMBDA_PORT
      - API_NEWSLETTER_SERVICE_DYNAMODB_PORT
      - API_NEWSLETTER_SERVICE_DYNAMODB_TABLE_NAME
  serverless-offline:
    httpPort: ${env:API_NEWSLETTER_SERVICE_OFFLINE_HTTP_PORT, 7020}
    websocketPort: ${env:API_NEWSLETTER_SERVICE_OFFLINE_WEBSOCKET_PORT, 7021}
    lambdaPort: ${env:API_NEWSLETTER_SERVICE_OFFLINE_LAMBDA_PORT, 7022}
  dynamodb:
    stages:
      - ${self:provider.stage}
    start:
      port: ${env:API_NEWSLETTER_SERVICE_DYNAMODB_PORT, 7025}
      migrate: true
    seed:
      dev:
        sources:
          - table: ${env:API_NEWSLETTER_SERVICE_DYNAMODB_TABLE_NAME}-${self:provider.stage}
            sources: [./utils/seed.json]
  enablePrivate:
    production: true
    review: true
    other: false
  allowedOrigin:
    production: 'https://meandering.rocks'
    review: 'https://dev.meandering.rocks'
    other: '*'
  limits:
    production:
      limit: 100
      burstLimit: 20
      rateLimit: 10
    review:
      limit: 10
      burstLimit: 2
      rateLimit: 1
  apiKeys:
    production:
      - name: ${env:API_KEY_NAME_TARGET_BROWSER}-production
        usagePlan:
          name: ${env:API_KEY_NAME_TARGET_BROWSER}-usage-plan-production
          quota:
            limit: ${self:custom.limits.production.limit}
            period: MONTH
          throttle:
            burstLimit: ${self:custom.limits.production.burstLimit}
            rateLimit: ${self:custom.limits.production.rateLimit}
      - name: ${env:API_KEY_NAME_TARGET_AUX}-production
        usagePlan:
          name: ${env:API_KEY_NAME_TARGET_BROWSER}-usage-plan-production
          quota:
            limit: ${self:custom.limits.production.limit}
            period: MONTH
          throttle:
            burstLimit: ${self:custom.limits.production.burstLimit}
            rateLimit: ${self:custom.limits.production.rateLimit}
    review:
      - name: ${env:API_KEY_NAME_TARGET_BROWSER}-review
        usagePlan:
          name: ${env:API_KEY_NAME_TARGET_BROWSER}-usage-plan-review
          quota:
            limit: ${self:custom.limits.review.limit}
            period: MONTH
          throttle:
            burstLimit: ${self:custom.limits.review.burstLimit}
            rateLimit: ${self:custom.limits.review.rateLimit}
      - name: ${env:API_KEY_NAME_TARGET_AUX}-review
        usagePlan:
          name: ${env:API_KEY_NAME_TARGET_BROWSER}-usage-plan-review
          quota:
            limit: ${self:custom.limits.review.limit}
            period: MONTH
          throttle:
            burstLimit: ${self:custom.limits.review.burstLimit}
            rateLimit: ${self:custom.limits.review.rateLimit}
  customDomain:
    basePath: ''
    domainName: ${file(../../../utils/tf-output.js):read.${self:provider.stage}.api_domain, place.holder}
    stage: ${self:provider.stage}

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'development'}
  region: ${opt:region, 'us-east-1'}
  timeout: 20
  role: ${file(../../../utils/tf-output.js):read.common.newsletter_service_lambda_role_arn, 'arn:fake'}
  apiGateway:
    restApiId:
      ${file(../../../utils/tf-output.js):read.${self:provider.stage}.api_gateway_id, '12345'}
    restApiRootResourceId:
      ${file(../../../utils/tf-output.js):read.${self:provider.stage}.api_gateway_resource_id, '12345'}
    metrics: false
  usagePlan:
    quota:
      limit: ${self:custom.limits.${self:provider.stage}.limit, self:custom.limits.other.limit}
      offset: 2
      period: MONTH
    throttle:
      burstLimit: ${self:custom.limits.${self:provider.stage}.burstLimit, self:custom.limits.other.burstLimit}
      rateLimit: ${self:custom.limits.${self:provider.stage}.rateLimit, self:custom.limits.other.rateLimit}

resources:
  Resources:
    subscriptionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:API_NEWSLETTER_SERVICE_DYNAMODB_TABLE_NAME}-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

functions:
  verify:
    handler: verify.handler
    events:
      - http:
          path: /newsletter/verify
          method: POST
  #         private: ${self:custom.enablePrivate.${opt:stage, 'other'}, false}
  #         cors:
  #           origin: ${self:custom.allowedOrigin.${opt:stage, 'other'}, '*'}
  #           headers:
  #             - Content-Type
  #             - X-Amz-Date
  #             - X-Api-Key
  #             - X-Amz-Security-Token
  #             - X-Amz-User-Agent

  subscribe:
    handler: subscribe.handler
    events:
      - http:
          path: /newsletter/subscribe
          method: POST
          private: false

  unsubscribe:
    handler: unsubscribe.handler
    events:
      - http:
          path: /newsletter/unsubscribe
          method: POST
          private: false

  subscribers:
    handler: subscribers.handler
    events:
      - http:
          path: /newsletter/subscribers
          method: GET
          private: false
